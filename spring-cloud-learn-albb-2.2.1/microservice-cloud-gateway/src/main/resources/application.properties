server.port=8081
logging.level.web=debug
spring.application.name=microservice-cloud-gateway
spring.cloud.nacos.discovery.server-addr=192.168.1.20:8848
#网关配置
#策略一：转发规则，访问：http://localhost:8081/gateway/getConfig，实际：http://localhost:8081/gateway/getConfig
spring.cloud.gateway.routes[0].id=product_route_1
spring.cloud.gateway.routes[0].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[0].predicates[0]=Path=/gateway/**,/rule/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
#策略二：根据参数匹配，访问：http://localhost:8081/getConfig--404，访问：http://localhost:8081/getConfig？smile=momo--200
spring.cloud.gateway.routes[1].id=product_route_2
spring.cloud.gateway.routes[1].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[1].predicates[0]=Query=smile
#策略三：将 Query 的值以键值对的方式进行配置,这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由
spring.cloud.gateway.routes[2].id=product_route_3
spring.cloud.gateway.routes[2].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[2].predicates[0]=Query=cry,ha.
#策略四：通过 Header 属性匹配,执行：curl http://localhost:8080/config -H "X-Request-Id:88" 成功；执行：curl http://localhost:8080/config -H "X-Request-Id:spring" 失败
spring.cloud.gateway.routes[3].id=product_route_4
spring.cloud.gateway.routes[3].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[3].predicates[0]=Header=X-Request-Id, \\d+
#策略五： 通过 Cookie 匹配，执行：curl http://localhost:8080/config --cookie "sessionId=test" 成功；执行：curl http://localhost:8080/config --cookie " 失败
spring.cloud.gateway.routes[4].id=product_route_5
spring.cloud.gateway.routes[4].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[4].predicates[0]=Cookie=sessionId, test
#策略六：通过host匹配， 执行：curl http://localhost:8080/config -H "Host: md.baidu.com" 成功；执行：curl http://localhost:8080/config -H "Host: md.qq.com" 失败
spring.cloud.gateway.routes[5].id=product_route_6
spring.cloud.gateway.routes[5].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[5].predicates[0]=Host=**.baidu.com
#策略七：通过请求方式匹配，执行：curl http://localhost:8080/getConfig 成功；执行：curl -X POST http://localhost:8080/getConfig 失败
spring.cloud.gateway.routes[6].id=product_route_7
spring.cloud.gateway.routes[6].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[6].predicates[0]=Method=GET
#策略八：通过请求IP匹配，原地址：192.168.1.20，执行：curl -X POST http://localhost:8080/getConfig 成功
spring.cloud.gateway.routes[7].id=product_route_8
spring.cloud.gateway.routes[7].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[7].predicates[0]=RemoteAddr=192.168.1.1/20
#总结
#各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。
#一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发
##############################################################
#过滤器使用
#过滤器一：PrefixPath，对所有请求路径加前缀
spring.cloud.gateway.routes[8].id=product_route_9
spring.cloud.gateway.routes[8].uri=lb://microservice-nacos-config
spring.cloud.gateway.routes[8].order=0
spring.cloud.gateway.routes[8].predicates[0]=Query=file
spring.cloud.gateway.routes[8].filters[0]=PrefixPath=/getConfig






